{"version":3,"sources":["Listitem.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItems","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","alert","filterdItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAmCeA,MA9Bf,SAAmBC,GACf,IACMC,EADMD,EAAME,MACIC,KAAI,SAAAC,GAC1B,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACvC,2BACI,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAW,SAACC,GAAD,OAAMZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAIzD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,SAASU,KAAK,QAAQC,QAAU,kBAAMhB,EAAMiB,YAAYb,EAAKE,cAO5F,OACE,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC5BlB,K,uBCtBdmB,IAAQC,IAAIC,K,IAmGGC,E,kDA9Ff,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAM,CACTtB,MAAM,GACNuB,YAAY,CACVf,KAAK,GACLJ,IAAI,KAGR,EAAKoB,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKV,YAAY,EAAKA,YAAYU,KAAjB,gBACjB,EAAKd,UAAU,EAAKA,UAAUc,KAAf,gBAZC,E,wDAiBNf,GACZiB,KAAKC,SAAS,CACZL,YAAY,CACVf,KAAKE,EAAEE,OAAOL,MACdH,IAAIyB,KAAKC,W,8BAMLpB,GACRA,EAAEqB,iBACF,IAAMC,EAAQL,KAAKL,MAAMC,YAEzB,GAAkB,KAAfS,EAAQxB,KAAU,CACnByB,QAAQC,IAAIF,GACZ,IAAMG,EAAS,GAAD,mBAAKR,KAAKL,MAAMtB,OAAhB,CAAsBgC,IACpCL,KAAKC,SAAS,CACZ5B,MAAMmC,EACNZ,YAAY,CACVf,KAAK,GACLJ,IAAI,WAORgC,MAAM,qB,kCAIIhC,GACV,IAAMiC,EAAcV,KAAKL,MAAMtB,MAAMsC,QAAO,SAAApC,GAAI,OAAIA,EAAKE,MAAMA,KAC/DuB,KAAKC,SAAS,CACZ5B,MAAMqC,M,gCAIA7B,EAAKJ,GAAK,IAAD,OACXJ,EAAM2B,KAAKL,MAAMtB,MACvBA,EAAMC,KAAI,SAAAC,GAOR,OANGA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,GAEZ,EAAKoB,SAAS,CACZ5B,MAAOA,IAEF,O,+BAKX,OACE,yBAAKG,UAAU,OACf,gCACE,0BAAMG,GAAG,aAAaiC,SAAUZ,KAAKD,SACnC,oDACA,2BAAOrB,KAAM,OAAOmC,YAAa,aACjCjC,MAAOoB,KAAKL,MAAMC,YAAYf,KAC5BC,SAAUkB,KAAKH,cACjB,4BAAQnB,KAAM,UAAd,YAGJ,kBAAC,EAAD,CACAL,MAAO2B,KAAKL,MAAMtB,MAClBe,YAAaY,KAAKZ,YAClBJ,UAAWgB,KAAKhB,iB,GAvFA8B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.14afa7b3.chunk.js","sourcesContent":["import React  from 'react'\r\nimport './Listitem.css'\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction ListItems(props) {\r\n    const items=props.items ;\r\n    const listItems=items.map(item =>{\r\n    return <div className=\"list\" key={item.key}>\r\n    <p>\r\n        <input type=\"text\" \r\n        id={item.key}\r\n        value={item.text}\r\n        onChange ={(e) =>props.setUpdate(e.target.value,item.key)}\r\n        \r\n        \r\n        />\r\n    <span>\r\n        <FontAwesomeIcon className=\"faicon\" icon=\"trash\" onClick={ () => props.deleteItems(item.key)}></FontAwesomeIcon>\r\n    </span> \r\n    \r\n    </p>\r\n   \r\n    </div>\r\n    })\r\n    return (\r\n      <div>\r\n          <FlipMove duration={500} easing=\"ease-in-out\">\r\n             {listItems}\r\n          </FlipMove>\r\n         \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ListItems\r\n","import React from 'react';\nimport ListItems from './Listitem'\nimport './App.css';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n\n \nconstructor(props){\n  super(props);\n  this.state={\n    items:[],\n    currentItem:{\n      text:'',\n      key:''\n    }\n  }\n  this.handleInput=this.handleInput.bind(this);\n  this.addItem=this.addItem.bind(this);\n  this.deleteItems=this.deleteItems.bind(this)\n  this.setUpdate=this.setUpdate.bind(this);\n}\n\n\n\nhandleInput(e){\nthis.setState({\n  currentItem:{\n    text:e.target.value,\n    key:Date.now()\n  }\n})\n}\n\n\naddItem(e){\ne.preventDefault();\nconst newItem=this.state.currentItem;\n\nif(newItem.text!==\"\"){\n  console.log(newItem)\n  const newItems=[...this.state.items,newItem];\n  this.setState({\n    items:newItems,\n    currentItem:{\n      text:'',\n      key:''\n    }\n  })\n\n}\nelse\n{\n  alert('Please fill it.')\n}\n}\n\ndeleteItems(key){\n  const filterdItems =this.state.items.filter(item => item.key!==key);\n  this.setState({\n    items:filterdItems\n  })\n}\n\nsetUpdate(text,key){\n  const items=this.state.items;\n  items.map(item =>{\n    if(item.key===key){\n      item.text=text\n    }\n    this.setState({\n      items :items\n    })\n    return 0;\n  })\n\n}\nrender () {\nreturn (\n  <div className=\"App\">\n  <header>\n    <form id=\"to-do-form\" onSubmit={this.addItem}>\n      <h2>Your Bucket List....</h2>\n      <input type =\"test\" placeholder =\"Enter Text\" \n      value={this.state.currentItem.text}\n        onChange={this.handleInput} />\n      <button type =\"submit\">Submit</button>\n    </form>\n  </header>\n  <ListItems \n  items={this.state.items} \n  deleteItems={this.deleteItems}\n  setUpdate={this.setUpdate}\n  >\n\n  </ListItems>\n  </div> \n)\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}